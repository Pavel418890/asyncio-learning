--------------------------------------------------------------------------------
Future
--------------------------------------------------------------------------------

Future - object which represents some action that will be completed later
 "in a future".

The future has a different states that define future's status
_PENDING - in progress; _CANCELLED - future was cancelled; _FINISHED - future is
complete.
By default it will be _PENDING until a result or exception is set on the future.

Another important class attribute of Future is a `_asycnio_future_blocking` this
field is used for a dual purpose:
  * Its presence is a marker to declare that a class implements
    the Future protocol (i.e. is intended to be duck-type compatible).
    This operation will be happened before start running a loop by the
    `run_until_complete` method. First of all it check, that received coro
    have this attribute if is not, then it can be awaitable object(
    had __await__ method ), which will be wrapped in Task object
    by the tasks.ensure_future method. Otherwise the TypeError will be raised.

   The value must also be not-None, to enable a subclass to declare
   that it is not compatible by setting this to None.
   When coro.send(None)  by the __step method it expect
   a Future/Task compatible object to be yielded. It trying to get the
   `_asyncio_future_blocking` marker, which should be a True if yielding
   future was through __await__ statement(set it right before yielding itself),
    otherwise a RuntimeError will be raised on next loop iteration via
    __step method.

  * It is set by __iter__() so that Task._step() can tell
    the difference between `await Future()` or`yield from Future()`
     (correct) vs. `yield Future()` (incorrect).
      It wouldn't trigger the __await__
    method on next future-compatible object and __step method will be
    received object with None flag and RuntimeError will be raised

TODO __log_traceback

-------------------------------------------------------------------------------
__init__
-------------------------------------------------------------------------------
Attache to itself the loop, which can be passed as optional argument or creates
on-the-fly using DefaultLoopPolicy. Also declare an empty list for callbacks.
It will be contains a future-compatible objects with optional context. This list
will be scheduled to the loop's FIFO queue as wrapped to Handle object in case
if the Future completes(i.e. change state from pending to finished or cancelled)
The Future itself also will be passed as single argument to the Handle and _run
method call them on next loop iteration.

--------------------------------------------------------------------------------
add_done_callback | remove_done_callback
--------------------------------------------------------------------------------
Multiple callbacks can be registered to be run when the future becomes done.
In case where Future is already complete it will be immediately schedule to
loop's FIFO queue as wrapped to Handle object with Future itself and optional
context. Otherwise the callback will be added to the callbacks list as tuple
of callback and optional context. The same callback can be registered multiple
times.

And the same way callbacks can be unregistered from the callbacks list.
The callback or callbacks(same callback registered multiple times) will be
filtered from original callbacks list and recreated as new list of callbacks
in case if that callback/callbacks was actually registered.

--------------------------------------------------------------------------------
set_result | set_exception | cancel
--------------------------------------------------------------------------------
Change the Future's state from PENDING to either _FINISHED or _CANCELLED
will be via those 3 method:

1. `set_result` would be called with single argument representing the result of
Future process and stored in _result attribute, in case if future's state
wasn't transferred from _PENDING state before.In this scenario InvalidStateError
will be raised. This argument will be received through the StopIteration
exception after another call coro.send(None). The Future's state will be
transferred to _FINISHED and all "waiting callbacks"  will be scheduled
to the loop's FIFO queue.
Note: The result argument can be received directly in different methods
where Future used as control unit of work.

2. `set_exception` have the same semantics as `set_result` except the result
of Future process stored in _exception attribute and some extra checking of
received argument will be. First of all it check that received argument is an
instantiated Exception. In case if is not, the default instantiation happen.
Instantiated exception cannot be a StopIteration type, because
StopIteration uses both this methods to change state of running coroutine
and can't be raised outside of loop control.
The another difference is an activation of __log_traceback class attribute(set it
to True). In case if this Future would be GCed the special message that
exception was never retrieved will be sent to the stderr.

3. `cancel` Before it change the Future's state
__log_traceback will be set to False, because there is no need to log a warning
message about exception was never retrieved if exception was set before cancel
called. After that check that state wasn't changed before,
otherwise the state will be transferred to _CANCELLED, store optional msg
argument in _cancelled_message if it's was received, schedule the
"waiting callbacks" to the FIFO queue. The _cancelled_message can be retrieved
via exception() method in later call or it will be raised as CancelledError
through result().

--------------------------------------------------------------------------------
result | exception
--------------------------------------------------------------------------------